import java.io.IOException;
import java.util.TreeMap;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Partitioner;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;


public class ViableProducts {

	
	public static class MyMapper extends Mapper<LongWritable, Text, Text, Text>
	{
		public void map(LongWritable key, Text value, Context c) throws IOException, InterruptedException
		{
		String str[] = value.toString().split(";");
		String prod_id = str[5];
		String age_sales= str[2]+"-"+str[8];
	
		c.write(new Text(prod_id), new Text(age_sales));
		}
	}
	
	
	public static class MyPartitioner extends Partitioner<Text, Text>
	{

		@Override
		public int getPartition(Text key, Text value, int numReduceTasks) 
		{
			
			String[] str = value.toString().split("-");
			
			if(str[0].equals("A"))
				return 0;
			
			else if(str[0].equals("B"))
				return 1;
			
			else if(str[0].equals("C"))
				return 2;
			
			else if(str[0].equals("D"))
				return 3;
			
			else if(str[0].equals("E"))
				return 4;
			
			else if(str[0].equals("F"))
				return 5;
			
			else if(str[0].equals("G"))
				return 6;
			
			else if(str[0].equals("H"))
				return 7;
			
			else if(str[0].equals("I"))
				return 8;
			
			else if(str[0].equals("J"))
				return 9;
			
			else
				return 10;
			
		}
		
	}
	
	public static class MyReducer extends Reducer<Text, Text, LongWritable, Text>
	{
		TreeMap<Long,String> ViablePdt = new TreeMap<Long, String>();
		
		public void reduce(Text key, Iterable<Text> values, Context c)
		{
			 String Pdt= "";
			 
			 String age = "";
			
			long sum = 0L;
			
			for(Text val : values)
			{
				String[] part = val.toString().split("-");
				
				 age = part[0];
				sum+=sum + Long.parseLong(part[1]);
			}
			
			Pdt = key.toString()+"-"+age;
			ViablePdt.put(sum,Pdt);
		
		
		if (ViablePdt.size()>5)
		{
			ViablePdt.remove(ViablePdt.firstKey());
		}
		
		}
		
		public void cleanup(Context c) throws IOException, InterruptedException
		{
			for(Long var: ViablePdt.descendingMap().keySet())
			{
				c.write(new LongWritable(ViablePdt.get(var)), new Text(ViablePdt.get(var)));
			}
		}
		
	}
	 
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
